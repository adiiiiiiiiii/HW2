# Pangram
#
# A pangram is any string that contains all the letters of the alphabet.
# In this function, you will be given a string and your task is to RETURN
# a boolean representing whether or not the string is a pangram.
#
# Note: Case does not matter when determining if a string is a pangram. So,
#       'abcDeFghiJkLmNopqrstuvwxyz' is a valid pangram.
#
#
# Example(s)
# ----------
# Example 1:
#   Input: 'the quick brown fox jumps over the lazy dog'
#   This string indeed contains all letters from a-z
#   Output:
#   True
#
# Parameters
# ----------
# str_in : str
#   A mixed case single-line string.
#
# Returns
# -------
# bool
#   Whether or not str_in is a pangram
#
def pangram(str_in):
    str_in = str_in.replace(' ', '')
    sortstr = sorted( str_in.lower() )
    for i in range (1, len(sortstr)-1):
        if ((sortstr[i] != chr( ord( sortstr[i-1] ) + 1 ) ) or (sortstr[i] != sortstr[i-1])):
            print 'False'
            return
    print 'True'

pangram('the quick brown fox jumps over the lazy dog')


# Prime Test
#
# A prime number is any natural number greater than 1 which has no positive
# divisors other than 1 and itself. In this function, you will get an integer
# and RETURN a boolean representing whether or not the number is prime.
#
# (Pat yourself on the back if you're able to prime check 961748941 in under
#  a second)
#
# Example(s)
# ----------
# Example 1:
#   Input: 13
#   13 has no divisors other than 1 and itself
#   Output:
#   True
#
# Example 2:
#   Input: 24
#   24 is divisible by 2, so it is not a prime number
#   Output:
#   False
#
# Parameters
# ----------
# num : int
#   The integer to check for being prime.
#   For the purposes of this problem, num < 10**5
#
# Returns
# -------
# bool
#   Whether or not 'num' is a prime number
#
def prime_test(num):
    pass


# Count Vowels
#
# For our purposes a vowel is either a, e, i, o, or u. Iterate through
# a string and return the number of vowels in it. Case does not matter.
#
# Example(s)
# ----------
# Example 1:
#   Input: aAaeeizzzzz
#   This string contains 3 a's, 2 e's, 1 i. So 6 vowels.
#   Output:
#   6
#
# Parameters
# ----------
# str_in : str
#   A mixed case single line string.
#
# Returns
# -------
# int
#   Number of vowels.
#
def count_vowels(str_in):
    lowstr = str_in.lower()
    count = 0
    for char in lowstr:
        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u':
            count +=1
    print count
#count_vowels('aAaeeizzzzz')


# Most Common Character
#
# You will receive a string as a parameter and you will need to return the
# character in the string that occurs the most. Case does not matter. The
# output should be lower case (if applicable). In case of a tie, return the
# character that showed up first.
#
# Example(s)
# ----------
# Example 1:
#   Input: aaAAaBBbcc
#   a occurs the most, at 5 times.
#   Output:
#   a
#
#
# Parameters
# ----------
# str_in : str
#   A mixed case single line string
#
# Returns
# -------
# str
#   The most common character in the given string
#
def most_common_char(str_in):
    lowstr = str_in.lower()
    lowstr = sorted(lowstr)
    countarr=[]
    chararr = []
    count = 0
    for i in range(0,len(lowstr)-1):
        count +=1
        if i == len(lowstr)-1:
            break
        if (lowstr[i] != lowstr[i+1]):
            countarr.append(count)
            chararr.append(lowstr[i])
            count=0
    ind = countarr.index(max(countarr))
    print chararr[ind]
#most_common_char('AAAeeeoooi')

# Fibonacci Sequence
#
# Given a number n, return the nth fibonacci sequence.
#
# Restrictions
# ------------
# We will not test a number larger than 100.
#
# Example(s)
# ----------
# Example 1:
#   Input: fibonacci(4)
#   The fourth fibonacci number can be calculated by doing a sequence.
#   1, 1, 2, 3, 5,...
#   The fourth sequence is 3.
#   Output: 3
#
# Example 2:
#   Input: fibonacci(5)
#   The fifth fibonacci number can be calculated by doing a sequence.
#   1, 1, 2, 3, 5,...
#   The fourth sequence is 5.
#   Output: 5
#
# Parameters
# ----------
# num : int
#   Num is the nth number of the sequence you need to calculate.
#
# Returns
# -------
# num : int
#   The nth number in the fibonnaci sequence
def fibonacci(num, fn1, fn2):
    count = 2
    fibarr = []
    fibarr.append(fn1)
    fibarr.append(fn2)
    while count < num:
        fn = fn2 + fn1
        fibarr.append(fn)
        fn2 = fn1
        fn1 = fn
        count += 1
    print fibarr[len(fibarr)-1]
#fibonacci (8, 1, 1)


# Advanced Divide
#
# Given 2 numbers, divide the first with the second.
# However, you must return an integer when the number is an integer,
# otherwise return a float.
#
# Restrictions
# ------------
# Zero will not be given as one of the arguments
#
# Example(s)
# ----------
# Example 1:
#   Input: advanced_divide(5, 6)
#   We want to divide 5 by 6. The result is a fraction, so we need to represent it as a float
#
#   Output:
#   0.8333333333333334
#
# Example 2:
#   Input: advanced_divide(10, 5)
#   We want to divide 10 by 5. The result is an integer, so we need to represent it as an integer.
#
#   Output:
#   2
#
# Parameters
# ----------
# num1 : int or float
#   The number that will get divided.
# num2 : int or float
#   The number that will divide.
#
# Returns
# -------
# int or float
#   An integer if the division should produce an integer.
#   A float if the division is a fraction.
def advanced_division(num1, num2):
    if num1%num2 == 0:
        print num1 // num2
    else:
        print num1/ float(num2)
#advanced_division(5,6)


# Palindrome
#
# A palindrome is any string that is the same when reversed.
# You will be given a string and you must RETURN a boolean 
# representing whether or not the string is a palindrome.
#
# Note: Case does not matter
#
#
# Example(s)
# ----------
# Example 1:
#   Input: 'a nut for a jar of tuna'
#   This string is the same forward and back
#   Output:
#   True
#
# Example 2:
#   Input: 'this is not a palindrome'
#   This string is not the same forward and back
#   Output:
#   False
#
# Parameters
# ----------
# str_in : str
#   A mixed case single-line string.
#
# Returns
# -------
# bool
#   Whether or not str_in is a palindrome
#
def palindrome(str_in):
    """
    get length of string
    convert string to list
    make one list out of chars from ind 0 -> mid-1
    make another list out of chars from ind mid -> len
    reverse 2nd list
    check if each part of each list matches
    """
    str_in = str_in.lower()
    str1 = str_in [:len(str_in)/2]
    str2 = str_in[len(str_in)/2:]
    str2 = str2[::-1]
    for i in range (0,len(str1)):
        if str1[i] != str2[i]:
            print 'False'
            return
    print 'True'
#palindrome('Not a palindrome')


# Unique
#
# Check if a word is made up of unique letters
# Note: Case does not matter
#
# Example(s)
# ----------
# Example 1:
#   Input: 'computer'
#   The word 'computer' has no repeating letters
#   Output:
#   True
#
# Example 2:
#   Input: 'science'
#   The word 'science' repeats the letters c and e
#   Output:
#   False
#
# Parameters
# ----------
# str_in : str
#   A mixed case single-line string.
#
# Returns
# -------
# bool
#   Whether or not str_in is made up of unique letters
#
def unique(str_in):
    lowstr = str_in.lower()
    for i in range(0,len(lowstr)-1):
        for j in range (i+1, len(lowstr)-1):
            if lowstr[i] == lowstr[j]:
                print 'False'
                return
    print 'True'
#unique('computer')

# nthPalindromicPrime
#
# Given a non-negative integer n return the nth palindromic prime
# A palindromic prime is a number that is both prime and a palidrome - a prime number that is read the same backwards and forwards.
# Some examples of palindromic primes: 2,3,5,7,11,101,131,151,181,191,313
# For example, if n = 3, the third palindromic prime is 5. Return 5.
#
# Example(s)
# ----------
# Example 1:
#   Input: 5
#   What is the 5th palindromic prime? It is 11
#   Output:
#   11
#
# Example 2:
#   Input: 8
#   What is the 8th palindromic prime? It is 151
#   Output:
#   151
#
# Parameters
# ----------
# n : a non-negative integer
#
# Returns
# -------
# int
#   the nth palindromic prime
#
# hint: write a helper function isPalindromicPrime(n) first!

def nthPalindromicPrime(n):
    pass    
